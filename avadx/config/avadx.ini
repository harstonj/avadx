#########################################
# Data- and input-folder config         #
#########################################
[DEFAULT]

# directory containing data files
# required | folder
datadir = data

# directory containing avadx data files
# Note: must be subdirectory of <datadir>
# required | folder
avadx.data = %(datadir)s/avadx

# folders containing annovar database files
# Note: must be subdirectory of <datadir>
# required | folder
annovar.humandb = %(datadir)s/annovar/humandb

# folders containing refseq genome reference
# Note: must be subdirectory of <datadir>
# required | folder
refseq.data = %(datadir)s/refseq

# folder containing ethseq model files
# Note: must be subdirectory of <datadir>
# required | folder
ethseq.models = %(datadir)s/ethseq/models

#########################################
# AVA,Dx pipeline config                #
#########################################
[avadx]

# VCF file (GRCh37/hgxx)
# required | file
# format  : regular VCF file 
vcf = test/input.vcf

# class=labels and optional cross-validation
# annotations for sampleids of interest
# required | file
# format  : csv
# columns : sampleid,class[,group|fold]
samples = test/samples.csv

# pipeline generates outlier analysis
# and stops before outlier filtering
# default: no
# optional | string | [yes, no] | default: no
outliers.break = no

# outlier sampleids to remove from further consideration
# optional | file
# format  : txt
# content : one id per line
outliers = test/outliers.txt

# create status reports for filtering steps
# Note: creating reports on large vcf files takes
# a considerable amount of time / resources
# default: yes
# optional | string | [yes, no] | default: yes
create.filter.reports = yes

# Human Genome (hg) reference assembly version
# default: hg19
# required | string | default: hg19
hgref = hg19

# remove all variant sites which do not pass
# the VQSR standard (= "PASS" flag)
# required | string | [yes, no] | default: yes
vqsrPASSfilter.enabled = yes

# remove variant sites based on site-wise quality
# see "site wise quality filter thresholds" [QUAL, DP]
# required | string | [yes, no] | default: yes
sitequalityfilter.enabled = yes

# pre-filter variants based on missing rate (MR)
# see "site wise quality filter thresholds" [MR]
# required | string | [yes, no] | default: yes
MRfilter.enabled = yes

# remove variant sites based on site-wise quality
# see "individual call quality filter thresholds" [AB, DP, GQ, MR]
# required | string | [yes, no] | default: yes
ABADfilter.enabled.enabled = yes

# apply gnomad filtering to exclude variants
# that were not recorded in the gnomAD database
# required | string | [yes, no] | default: yes
gnomadfilter.enabled = yes

# split EthSEQ processing into chunks of <n> samples
# optional | int | default: 500
ethseq.split = 500

# Cores (CPU) limit for steps capable of hyper threading
# defaults to 0 (i.e. all available in host / VM)
# optional | int | default: 0
resources.cpu = 0

# Memory (MEM) limit
# defaults to 0 (i.e. total available in host / VM)
# optional | int | default: 0
resources.mem = 0

# list of predictors to extract from varidb
# format: comma separated list (no spaces)
# required | string | default: SNAPfun
varidb.predictors = SNAPfun

# function to aggregate variant scores into a single gene score
# Use one of the built in functions or supply a path to python file (ending with ".py")
# which implements a scoring function. See README for more details.
# required | string or file | [gene_sum, gene_product] | default: gene_sum
genescore.fn = gene_sum

# function to compute single variant scores
# Use one of the built in functions or supply a path to python file (ending with ".py")
# which implements a scoring function. See README for more details.
# required | string or file | [variant_avadx] | default: variant_avadx
variantscore.fn = variant_avadx

# normalize by protein length
# required | string | [y, n, both] | default: both
normalizeby = both

# site wise quality filter thresholds
# QUAL: Confidence for "Some kind of variation" at side
#       internal metric generated
#       by GATK for site quality assessment
# DP:   Allele Depth
#       low ~= low quality; variant called 
#        based on very few evidences.
#       high ~= low quality; likely from
#        sequence fragments of repeated regions
# required | int | default: 30
qc.site.quality = 30
# required | int | default: 6
qc.site.mean_dp_lower = 6
# required | int | default: 150
qc.site.mean_dp_upper = 150

# individual call quality filter thresholds
# AB: Allele Balance
# DP: Allele Depth
# GQ: Genotype assignment confidence
# MR: Missing Rate (remove if above)
# required | float | default: 0.3
qc.call.AB_low = 0.3
# required | float | default: 0.7
qc.call.AB_high = 0.7
# required | int | default: 4
qc.call.DP = 4
# required | int | default: 15
qc.call.GQ = 15
# required | float | default: 0.80
qc.call.MR = 0.80

# Relatedness check threshold
# A kinship value of ~0.5 indicates
# first-degree relatedness, e.g. parent-child. 
# required | float | default: 0.3
kinship = 0.3

# required | string | [ks, DKM] | default: ks
cv.featureselection = ks

# required | string | [rf, SVM] | default: rf
cv.model = rf

# required | int | default: 10
# if set to 1, leave-one-out (LOO-CV) cross-validation
# will be performed
cv.folds = 10

# step genes to try out (increasing by <n> genes)
# required | int | default: 5
cv.steps = 5

# top-ranked genes to try out (try until the top <n> genes)
# required | int | default: 200
cv.topgenes = 200

# only keep genes from feature selection (ks) with a
# p-value < this cutoff
# required | float | default: 0.2
cv.ks.pvalcutoff = 0.2

# remove gene if more than <n>% samples have the same score
# required | int(%) | default: 99
cv.varcutoff = 99

# required | int | default: 0
# number of genes to select for over-representation analysis
# if set to "0", all top-ranking genes selected in the
# cross-validation set are used for pathway analysis
pathways.topgenes = 0
